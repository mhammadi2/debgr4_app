// File: prisma/schema.prisma (Complete and Corrected)

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

/* ==========================================================
   MODELS
   ========================================================== */

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  imageUrl  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status        UserStatus @default(ACTIVE) // For enabling/disabling users

  orders Order[]
}

// --- THIS IS THE NEWLY ADDED MODEL ---
model Admin {
  id           String   @id @default(cuid())
  username     String   @unique
  passwordHash String
  role         UserRole @default(ADMIN)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
// ------------------------------------

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  category    String
  description String?
  price       Decimal        @db.Decimal(12, 2)
  imageUrl    String?        @default("")
  stock       Int            @default(0)
  status      ProductStatus  @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  orderItems  OrderItem[]

  @@index([name])
  @@index([category])
}

model Order {
  id                 String        @id @default(cuid())
  orderId            String        @unique
  userId             String?
  customerEmail      String
  customerName       String
  customerPhone      String
  status             OrderStatus   @default(PENDING)
  totalAmount        Decimal       @db.Decimal(14, 2)
  shippingAddressId  String        @unique
  paymentIntent      String?
  paymentStatus      PaymentStatus @default(PENDING)
  specialInstructions String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  user            User?       @relation(fields: [userId], references: [id])
  shippingAddress Address     @relation(fields: [shippingAddressId], references: [id])
  orderItems      OrderItem[]
  transactions    Transaction[]

  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   Int
  name        String
  price       Decimal  @db.Decimal(12, 2)
  quantity    Int
  imageUrl    String?
  variantId   String?
  variantName String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([productId])
}

model Address {
  id         String  @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String

  order Order?
}

model Transaction {
  id              String   @id @default(cuid())
  orderId         String
  amount          Decimal   @db.Decimal(14, 2)
  currency        String    @default("USD")
  stripeSessionId String?
  stripePaymentId String?
  status          TransactionStatus
  errorMessage    String?
  createdAt       DateTime  @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([createdAt])
}

/* ==========================================================
   ENUMS
   ========================================================== */

enum ProductStatus {
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}